#include "output.h"

using std::vector;
#include <iostream>
using std::cout;
using std::endl;
#include <fstream>
#include <sstream>

void gnuplot_export(const vector<double>& input,
                    const vector<vector<double>>& transformed,
                    const vector<vector<double>>& inverse,
                    int samplerate, Format format) {
    int window_num = 0;
    int input_index = 0;
    
    //TODO: add file output for inverse too
    for(const vector<double>& window : transformed) {
        std::ofstream dct_file(std::to_string(window_num) + ".dct");
        if(format == Format::OWN) {
            dct_file << "# DCT spectrum file generated by Arduino_DCT\n";
            dct_file << "# X Y\n";
        } else if (format == Format::MATLAB) {
            dct_file << "[";
        }

        int x = 0;

        for(const double d : window) {
            const double x_scaled = x * samplerate / (2.0 * window.size());
            
            if(format == Format::OWN) {
                dct_file << x_scaled << " " << d << "\n";
            } else if(format == Format::MATLAB) {
                dct_file << x_scaled << "," << d;
                
                if (x == (int)window.size() - 1) {
                    dct_file << "]";
                } else {
                    dct_file << ";";
                }
            }
            x++;
        }

        std::ofstream signal_file(std::to_string(window_num) + ".signal");

        if(format == Format::OWN) {
            signal_file << "# Signal file generated by Arduino_DCT\n";
            signal_file << "# X Y\n";
        } else if (format == Format::MATLAB) {
            signal_file << "[";
        }
        
        x = 0;
        for(size_t i = 0; i < window.size(); ++i, ++input_index, ++x) {
            const double x_scaled = x * 1.0 / samplerate;
            
            if(format == Format::OWN) {
                signal_file << x_scaled << " " << input.at(input_index) << "\n";
            } else if(format == Format::MATLAB) {
                signal_file << x_scaled << "," << input.at(input_index);
                
                if (i == window.size()-1) {
                    signal_file << "]";
                } else {
                    signal_file << ";";
                }
            }
        }

        window_num++;
    }
}
